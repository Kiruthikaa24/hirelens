# -*- coding: utf-8 -*-
"""TrainingDataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EZma2dNlVszGj-LUUGlCZcXuZv9eK0pH
"""

!pip install sentence-transformers datasets transformers

# Install required packages
!pip install sentence-transformers datasets transformers -q

# Upload your CSV file
from google.colab import files
uploaded = files.upload()

import pandas as pd


df = pd.read_csv("resume_job_dataset_updated.csv")
df['input'] = df.apply(lambda row: f"Resume: {row['resume_text']} Education: {row['education']} JD: {row['job_description']}", axis=1)
df[['input', 'label']].head()

from sentence_transformers import InputExample
from torch.utils.data import Dataset

class ResumeJobDataset(Dataset):
    def __init__(self, dataframe):
        self.examples = [
            # Split the input into two parts for comparison, you can adjust this logic to your needs
            InputExample(texts=[row['resume_text'], row['job_description']], label=float(row['label']))
            for _, row in dataframe.iterrows()
        ]

    def __len__(self):
        return len(self.examples)

    def __getitem__(self, idx):
        return self.examples[idx]

dataset = ResumeJobDataset(df)

from sentence_transformers import SentenceTransformer, losses, models
from torch.utils.data import DataLoader

# Load base model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Create a DataLoader
train_dataloader = DataLoader(dataset, shuffle=True, batch_size=8)

# Loss Function - Cosine Similarity + Regression
train_loss = losses.CosineSimilarityLoss(model=model)

import os
os.environ["WANDB_DISABLED"] = "true"  # ðŸ”• Disable logging prompt

# Fine-tune the model
model.fit(
    train_objectives=[(train_dataloader, train_loss)],
    epochs=4,
    warmup_steps=10,
    output_path='fine-tuned-hirelens-model'
)

from sentence_transformers import SentenceTransformer

finetuned_model = SentenceTransformer('fine-tuned-hirelens-model')

model = SentenceTransformer('fine-tuned-hirelens-model')

import pandas as pd
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

# Load fine-tuned model
model = SentenceTransformer('fine-tuned-hirelens-model')

# Load test dataset
df = pd.read_csv("test_data.csv")  # Ensure this file exists in your environment

y_true = []
y_pred = []

# Threshold for classification
threshold = 0.8

# Compare job descriptions with resumes
for _, row in tqdm(df.iterrows(), total=len(df)):
    job_text = row['job_description']
    resume_text = row['resume_text']
    label = int(row['label'])

    job_embed = model.encode(job_text)
    resume_embed = model.encode(resume_text)
    similarity = cosine_similarity([job_embed], [resume_embed])[0][0]

    prediction = 1 if similarity >= threshold else 0

    y_true.append(label)
    y_pred.append(prediction)

# Evaluation Metrics
accuracy = accuracy_score(y_true, y_pred)
precision = precision_score(y_true, y_pred, zero_division=0)
recall = recall_score(y_true, y_pred, zero_division=0)
cm = confusion_matrix(y_true, y_pred)

# Print metrics
print(" Evaluation Results:")
print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print("Confusion Matrix:")
print(cm)

#  Plot Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Rejected", "Selected"], yticklabels=["Rejected", "Selected"])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()